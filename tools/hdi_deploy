#!/bin/bash
echo ""
xsorcf=$1
#org="HANAExpress"
org="LCFX"
space="DEV"
path=$2
proj="python-dev-env"
app=$proj"_"$path
host=$app"-"$path
dowait=""
doexport1=""
doexport2=""
if [ "$#" -eq 2 ]; then
  if [ $xsorcf = "xs" ]; then
    dowait=" --wait-indefinitely"
    doexport1=" --export-json /dev/stdout 2>/dev/null | tail -n +5"
    echo "XS cool."
  else
    if [ $xsorcf = "cf" ]; then
      doexport1=" | tail -n +5 | head -n -8"
      doexport2=" | head -n -1"
      echo "CF cool."
    else
      echo "Not XS or CF, try again."
      exit 1
    fi
  fi

  echo Client HDI $xsorcf Deploy into org: $org space: $space Starting 
  echo ""
  npm config set @sap:registry "https://npm.sap.com/" ; npm config set registry "https://registry.npmjs.org/" ; npm config set strict-ssl true

  instance=$proj"-hdi"

  cmd=$xsorcf' services | grep '$instance
  echo $cmd
  eval $cmd
  RESULT=$?

  echo 'RESULT:'$RESULT

  service='hana'
  plan='hdi-shared'

  if [ $RESULT -ne 0 ]; then
    cmd=$xsorcf' create-service '$service' '$plan' '$instance
    echo $cmd
    eval $cmd

  fi
  
  cmd=$xsorcf' services | grep '$instance
  echo $cmd
  eval $cmd
  RESULT=$?

  echo 'RESULT:'$RESULT

  # Service creation is NOT assured to happen right away
  while [ $RESULT -ne 0 ]; do
    sleep 30
    cmd=$xsorcf' services | grep '$instance
    echo $cmd
    eval $cmd
    RESULT=$?

    echo 'RESULT:'$RESULT
    # cf services | grep dat368-hdi | grep "create succeeded"
  done 

  cmd=$xsorcf' push '$app' -k 1024M -m 256M -p '$path' --no-start --no-route'
  echo $cmd
#  eval $cmd

  cmd=$xsorcf' bind-service '$app' '$instance
  echo $cmd
#  eval $cmd

  cmd=$xsorcf' restart '$app' '$dowait' ; sleep 20 ; '$xsorcf' stop '$app
  echo $cmd
#  eval $cmd

  cmd='HDI_SCHEMA=$('$xsorcf' env '$app' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.schema'"'"$doexport2')'
  #echo $cmd
  eval $cmd
  echo 'HDI_SCHEMA='$HDI_SCHEMA

  cmd='HDI_USER=$('$xsorcf' env '$app' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.user'"'"$doexport2')'
  #echo $cmd
  eval $cmd
  echo 'HDI_USER='$HDI_USER

  cmd='HDI_PASS=$('$xsorcf' env '$app' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.password'"'"$doexport2')'
  #echo $cmd
  eval $cmd
  echo 'HDI_PASS='$HDI_PASS

  # Call the HDI stored proc that enables granting of the container to the SYSTEM user
  echo ""
  echo "Enter hdbsql interactive mode with this."
  echo ""
  cmd="hdbsql -i 00 -n parvus.lcfx.net:30015 -d HXE -u "$HDI_USER" -p "$HDI_PASS
  echo $cmd
  echo ""
  echo ""
  echo "Execute these commands in hdbsql interactive console."
  echo ""
  echo "SET SCHEMA "'"'"$HDI_SCHEMA"'"'";"
  echo "CALL "'"'"mta_python_dev_env::grant_role"'"'"('SYSTEM','mta_python_dev_env_admin',?);"
  echo "\q"
  echo ""
  echo ""
  echo "If you see the following message."
  echo ""
  echo "Granted role"$HDI_SCHEMA".mta_python_dev_env_admin to SYSTEM"
  echo ""
  echo "Then the SYSTEM user can access the HDI container with schema name: "$HDI_SCHEMA" in eclipse."
  echo ""

else
    echo "Usage ./hdi_deploy xs[cf] path"
    exit 1
fi
echo ""
echo Client HDI Deploy Finished
